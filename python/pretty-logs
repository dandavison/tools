#!/usr/bin/env python
import codecs
import json
import sys

try:
    from rich import print
    from rich.console import Console
    from rich.syntax import Syntax
except ImportError:
    sys.stderr.write("Please install rich: `pip install rich`\n")
    sys.exit(1)

console = Console()

global INFO_LOG_FILE


def main():
    for line in sys.stdin:
        try:
            brace = line.index("{")
            record = json.loads(line[brace:])
            if not isinstance(record, dict):
                raise ValueError
        except:
            print(line, end="")
        else:
            prefix = line[:brace]
            if prefix:
                record["_prefix"] = prefix
            record = transform(record)
            if record.get("level", "").lower() == "info":
                with open(INFO_LOG_FILE, "a") as f:
                    print(record, file=f)
            else:
                console.print(style_record(record))


def transform(record: dict) -> dict:
    for k in ["stacktrace"]:
        try:
            v = record[k]
            if isinstance(v, str):
                v = format_string(v)
            if isinstance(v, list):
                v = list(map(format_string, v))
            record[k] = v
        except:
            pass
    return record


def format_string(s: str) -> str:
    try:
        return codecs.decode(s, "unicode_escape")
    except:
        return s


def style_record(record: dict) -> Syntax:
    is_error = (
        record.get("level", "").lower() == "error"
        or "error" in record
        or "stacktrace" in record
    )
    error_theme = "default"  # happens to apply red style to strings
    s = json.dumps(record, indent=2).replace("\\n", "\n").replace("\\t", "\t")
    # default, sas, manni
    return Syntax(s, "json", theme=error_theme if is_error else "sas", word_wrap=True)


[INFO_LOG_FILE] = sys.argv[1:]
with open(INFO_LOG_FILE, "w") as f:
    pass

main()
